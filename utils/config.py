import asyncio\"nimport yaml\"nimport os\"nimport importlib.util\"nfrom brokers.tradier_broker import TradierBroker\"nfrom brokers.tastytrade_broker import TastytradeBroker\"nfrom brokers.alpaca_broker import AlpacaBroker\"nfrom brokers.kraken_broker import KrakenBroker\"nfrom database.models import init_db\"nfrom database.db_manager import DBManager\"nfrom sqlalchemy.ext.asyncio import create_async_engine\"nfrom sqlalchemy import create_engine\"nfrom strategies.constant_percentage_strategy import ConstantPercentageStrategy\"nfrom strategies.random_yolo_hedge_strategy import RandomYoloHedge\"nfrom strategies.black_swan_strategy import BlackSwanStrategy\"nfrom strategies.simple_strategy import SimpleStrategy\"nfrom .logger import logger\"n\"n# Constants for configurable values.\"nSYNC_WORKER_INTERVAL_SECONDS = 60 * 5\"nORDER_MANAGER_INTERVAL_SECONDS = 9\"n\"n# Broker and strategy maps.\"nBROKER_MAP = {\"tradier": lambda config, engine: TradierBroker(\"n    api_key=os.environ.get('TRADIER_API_KEY', config.get('api_key')),\"n    secret_key=None,\"n    engine=engine,\"n    prevent_day_trading=config.get('prevent_day_trading', False)\"n),\"tradier": lambda config, engine: TradierBroker(\"n    api_key=os.environ.get('TRADIER_API_KEY', config.get('api_key')),\"n    secret_key=None,\"n    engine=engine,\"n    prevent_day_trading=config.get('prevent_day_trading', False)\"n),\"tastytrade": lambda config, engine: TastytradeBroker(\"n    username=os.environ.get('TASTYTRADE_USERNAME', config.get('username')),\"n    password=os.environ.get('TASTYTRADE_PASSWORD', config.get('password')),\"n    engine=engine,\"n    prevent_day_trading=config.get('prevent_day_trading', False)\"n),\"alpaca": lambda config, engine: AlpacaBroker(\"n    api_key=os.environ.get('ALPACA_API_KEY', config.get('api_key')),\"n    secret_key=os.environ.get('ALPACA_SECRET_KEY', config.get('secret_key')),\"n    engine=engine,\"n    prevent_day_trading=config.get('prevent_day_trading', False)\"n),\"kraken": lambda config, engine: KrakenBroker(\"n    api_key=os.environ.get('KRAKEN_API_KEY', config.get('api_key')),\"n    secret_key=os.environ.get('KRAKEN_SECRET_KEY', config.get('secret_key')),\"n    engine=engine\"n)\"n}\"n\"nSTRATEGY_MAP = {\"constant_percentage": lambda broker, strategy_name, config: ConstantPercentageStrategy(\"n    broker=broker,\"n    strategy_name=strategy_name,\"n    stock_allocations=config['stock_allocations'],\"n    cash_percentage=config['cash_percentage'],\"n    rebalance_interval_minutes=config['rebalance_interval_minutes'],\"n    starting_capital=config['starting_capital'],\"n    buffer=config.get('rebalance_buffer', 0.1)\"n),\"random_yolo_hedge": lambda broker, strategy_name, config: RandomYoloHedge(\"n    broker=broker,\"n    strategy_name=strategy_name,\"n    rebalance_interval_minutes=config['rebalance_interval_minutes'],\"n    starting_capital=config['starting_capital'],\"n    max_spread_percentage=config.get('max_spread_percentage', 0.25),\"n    bet_percentage=config.get('bet_percentage', 0.2),\"n    execution_style=config.get('execution_style', 'market')\"n),\"simple": lambda broker, strategy_name, config: SimpleStrategy(\"n    broker=broker,\"n    buy_threshold=config.get('buy_threshold', 0),\"n    sell_threshold=config.get('sell_threshold', 0)\"n),\"black_swan": lambda broker, strategy_name, config: BlackSwanStrategy(\"n    broker=broker,\"n    strategy_name=strategy_name,\"n    rebalance_interval_minutes=config['rebalance_interval_minutes'],\"n    starting_capital=config['starting_capital'],\"n    symbol=config.get('symbol', 'SPY')),\"n    otm_percentage=config.get('otm_percentage', 0.05),\"n    expiry_days=config.get('expiry_days', 30),\"n    bet_percentage=config.get('bet_percentage', 0.1),\"n    holding_period_days=config.get('holding_period_days', 14),\"n    spike_percentage=config.get('spike_percentage', 500)\"n),\"custom": lambda broker, strategy_name, config: load_custom_strategy(broker, strategy_name, config)\"n}\"n\"n# Utility function to load strategy classes.\"ndef load_strategy_class(file_path, class_name):\"n    logger.info(f"Attempting to load strategy class '{class_name}' from file '{file_path}'")\"n    try:\"n        spec = importlib.util.spec_from_file_location(class_name, file_path)\"n        module = importlib.util.module_from_spec(spec)\"n        spec.loader.exec_module(module)\"n        strategy_class = getattr(module, class_name)\"n        logger.info(f"Successfully loaded strategy class '{class_name}' from file '{file_path}'")\"n        return strategy_class\"n    except Exception as e:\"n        logger.error(f"Failed to load strategy class '{class_name}' from file '{file_path}': {e}")\"n        raise\"n"/>